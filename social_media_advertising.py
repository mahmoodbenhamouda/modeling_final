# -*- coding: utf-8 -*-
"""Social_Media_Advertising.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jzhByNRQgGxsosP4PxyGS3R6uZmmz2Y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('Social_Media_Advertising.csv')
data

# Nettoyer les noms des colonnes (au cas où il y aurait des espaces ou tabulations)
data.columns = data.columns.str.strip()

# Vérifier si la colonne Target_Audience existe et contient des valeurs non nulles
if 'Target_Audience' in data.columns:
    data['Target_Audience'] = data['Target_Audience'].astype(str)  # S'assurer que c'est bien du texte
    data[['Sexe', 'Age']] = data['Target_Audience'].str.split(n=1, expand=True)
    data.drop(columns=['Target_Audience'], inplace=True)  # Supprimer la colonne après séparation

# Afficher les premières lignes pour vérifier
print("\nAperçu des données après séparation :")
print(data.head())

!pip install sweetviz

# Aperçu des premières lignes
print("Aperçu des premières lignes du dataset :")
print(data.head())

# Vérification des types de colonnes
print("\nRésumé des types de données :")
print(data.dtypes)

# prompt: generate report on data

import sweetviz as sv

# Generate the report
report = sv.analyze(data)

# Display the report
report.show_html()

# Création d'un DataFrame pour la description des colonnes
description_data = {
    "Nom de la colonne": ["Campaign_ID", "Target_Audience", "Campaign_Goal", "Duration", "Channel_Used", "Conversion_Rate", "Acquisition_Cost", "ROI", "Location", "Language", "Clicks", "Impressions", "Engagement_Score", "Customer_Segment", "Date", "Company"],
    "Description": [
        "Identifiant unique de la campagne",
        "Public cible (ex: 'Men 35-44')",
        "Objectif de la campagne (ex: 'Product Launch', 'Increase Sales')",
        "Durée de la campagne (ex: '15 Days')",
        "Réseau social utilisé (ex: 'Instagram', 'Facebook')",
        "Taux de conversion (proportion de visiteurs effectuant une action)",
        "Coût d'acquisition d'un client (format monétaire '$500.00')",
        "Retour sur investissement",
        "Ville où la campagne a été diffusée",
        "Langue de la campagne",
        "Nombre de clics reçus",
        "Nombre total d'affichages de la publicité",
        "Score d'engagement mesurant l'interaction des utilisateurs",
        "Segment de clientèle ciblé (ex: 'Health', 'Technology')",
        "Date de lancement de la campagne",
        "Nom de l'entreprise ayant lancé la campagne"
    ]
}

col_desc_df = pd.DataFrame(description_data)
print("\nDescription des colonnes :")
print(col_desc_df)

print("Aperçu des données:")
print(data.head())

# Afficher des informations sur les données
data.info()

# Statistiques descriptives
descriptive_stats = data.describe()
print("\nStatistiques descriptives:")
print(descriptive_stats)

# Vérifier les valeurs manquantes
print("\nValeurs manquantes par colonne:")
print(data.isnull().sum())

# Vérifier les valeurs manquantes
print("\nValeurs manquantes par colonne:")
print(data.isnull().sum())

# Distribution des variables numériques
plt.figure(figsize=(10, 5))
sns.histplot(data, kde=True, bins=30)
plt.title("Distribution des variables numériques")
plt.show()

# Afficher les valeurs uniques pour chaque colonne catégorielle
categorical_cols = data.select_dtypes(include=['object']).columns

for col in categorical_cols:
    print(f"\nValeurs uniques dans {col}:")
    print(data[col].value_counts())

# Sélectionner uniquement les colonnes numériques
numeric_data = data.select_dtypes(include=['number'])

# Vérifier s'il y a des colonnes numériques avant de tracer la heatmap
if numeric_data.shape[1] > 1:
    plt.figure(figsize=(8, 6))
    sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
    plt.title("Matrice de corrélation")
    plt.show()
else:
    print("Pas assez de colonnes numériques pour générer une matrice de corrélation.")

# Sélectionner uniquement les colonnes numériques
numeric_data = data.select_dtypes(include=['number'])

# Supprimer la colonne "Impressions" si elle est présente
if "Impressions" in numeric_data.columns:
    numeric_data = numeric_data.drop(columns=["Impressions"])

# Vérifier s'il y a des colonnes numériques avant de tracer la heatmap
if numeric_data.shape[1] > 1:
    plt.figure(figsize=(8, 6))
    sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
    plt.title("Matrice de corrélation")
    plt.show()
else:
    print("Pas assez de colonnes numériques pour générer une matrice de corrélation.")

print(data.head())

import matplotlib.pyplot as plt
import seaborn as sns

# Identifier les colonnes numériques
numeric_cols = data.select_dtypes(include=['number']).columns

# Visualisation avec des violins plots
for col in numeric_cols:
    plt.figure(figsize=(8, 5))
    sns.violinplot(x=data[col], color="blue")
    plt.title(f"Distribution de {col}")
    plt.xlabel(col)
    plt.show()

if "Target_Audience" in data.columns and "Customer_Segment" in data.columns:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=data, y="Target_Audience", hue="Customer_Segment", palette="Set2")
    plt.title("Répartition de Target_Audience par Customer_Segment")
    plt.xlabel("Nombre d'observations")
    plt.ylabel("Target_Audience")
    plt.legend(title="Customer_Segment")
    plt.show()

if "Campaign_Goal" in data.columns and "Channel_Used" in data.columns:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=data, y="Campaign_Goal", hue="Channel_Used", palette="Set2")
    plt.title("Répartition de Campaign_Goal par Channel_Used")
    plt.xlabel("Nombre d'observations")
    plt.ylabel("Campaign_Goal")
    plt.legend(title="Channel_Used")
    plt.show()

# Visualisation 2 : Taux de conversion par canal
plt.figure(figsize=(10, 6))
sns.barplot(x='Channel_Used', y='Conversion_Rate', data=data, estimator='mean', ci=None, palette='Set2')
plt.title('Taux de conversion moyen par canal')
plt.xlabel('Canal utilisé')
plt.ylabel('Taux de conversion moyen')
plt.xticks(rotation=45)
plt.show()

# Visualisation 3 : Relation entre les clics et le taux de conversion
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Clicks', y='Conversion_Rate', data=data, hue='Channel_Used', palette='Set1')
plt.title('Relation entre les clics et le taux de conversion')
plt.xlabel('Nombre de clics')
plt.ylabel('Taux de conversion')
plt.legend(title='Canal utilisé')
plt.show()

# Visualisation 4 : Engagement par segment client
plt.figure(figsize=(10, 6))
sns.boxplot(x='Customer_Segment', y='Engagement_Score', data=data, palette='Set3')
plt.title('Engagement par segment client')
plt.xlabel('Segment client')
plt.ylabel('Score d\'engagement')
plt.xticks(rotation=45)
plt.show()

# Visualisation 7 : Taux de conversion au fil du temps
plt.figure(figsize=(12, 6))
data['Date'] = pd.to_datetime(data['Date'])  # Convertir la colonne Date en datetime
data.set_index('Date', inplace=True)
data['Conversion_Rate'].resample('M').mean().plot()  # Moyenne mensuelle du taux de conversion
plt.title('Évolution du taux de conversion au fil du temps')
plt.xlabel('Date')
plt.ylabel('Taux de conversion moyen')
plt.grid()
plt.show()

# Visualisation 8 : Nombre de clics par canal
plt.figure(figsize=(10, 6))
sns.barplot(x='Channel_Used', y='Clicks', data=data, estimator='sum', ci=None, palette='Set2')
plt.title('Nombre total de clics par canal')
plt.xlabel('Canal utilisé')
plt.ylabel('Nombre total de clics')
plt.xticks(rotation=45)
plt.show()

# Visualisation 9 : Engagement par canal
plt.figure(figsize=(10, 6))
sns.boxplot(x='Channel_Used', y='Engagement_Score', data=data, palette='Set3')
plt.title('Engagement par canal')
plt.xlabel('Canal utilisé')
plt.ylabel('Score d\'engagement')
plt.xticks(rotation=45)
plt.show()

# Visualisation 10 : Taux de conversion par segment client
plt.figure(figsize=(10, 6))
sns.barplot(x='Customer_Segment', y='Conversion_Rate', data=data, estimator='mean', ci=None, palette='Set1')
plt.title('Taux de conversion moyen par segment client')
plt.xlabel('Segment client')
plt.ylabel('Taux de conversion moyen')
plt.xticks(rotation=45)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd  # Assurez-vous que pandas est aussi importé si vous utilisez pd

# Visualisation 11 : Relation entre les impressions et le taux de conversion
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Impressions', y='Conversion_Rate', data=data, hue='Channel_Used', palette='Set1')
plt.title('Relation entre les impressions et le taux de conversion')
plt.xlabel('Nombre d\'impressions')
plt.ylabel('Taux de conversion')
plt.legend(title='Canal utilisé')
plt.show()

# Visualisation 12 : Engagement en fonction du coût d'acquisition
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Acquisition_Cost', y='Engagement_Score', data=data, hue='Channel_Used', palette='Set2')
plt.title('Engagement en fonction du coût d\'acquisition')
plt.xlabel('Coût d\'acquisition')
plt.ylabel('Score d\'engagement')
plt.legend(title='Canal utilisé')
plt.show()

# 1. Diagramme en barres pour visualiser la relation entre Target_Audience et Customer_Segment
plt.figure(figsize=(10, 6))
sns.countplot(x='Age', hue='Customer_Segment', data=data, palette='Set2')
plt.title('Répartition de Target_Audience par Customer_Segment')
plt.xlabel('Cible du Public')
plt.ylabel('Nombre de campagnes')
plt.xticks(rotation=45)
plt.legend(title='Segment Client')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='Sexe', hue='Customer_Segment', data=data, palette='Set2')
plt.title('Répartition de Target_Audience par Customer_Segment')
plt.xlabel('Cible du Public')
plt.ylabel('Nombre de campagnes')
plt.xticks(rotation=45)
plt.legend(title='Segment Client')
plt.tight_layout()
plt.show()

# 2. Heatmap de la fréquence des combinaisons entre Target_Audience et Customer_Segment
cross_tab = pd.crosstab(data['Age'], data['Customer_Segment'])
plt.figure(figsize=(10, 6))
sns.heatmap(cross_tab, annot=True, cmap="YlGnBu", fmt="d", cbar=False)
plt.title('Heatmap des fréquences entre Target_Audience et Customer_Segment')
plt.xlabel('Segment Client')
plt.ylabel('Cible du Public')
plt.tight_layout()
plt.show()

cross_tab = pd.crosstab(data['Sexe'], data['Customer_Segment'])
plt.figure(figsize=(10, 6))
sns.heatmap(cross_tab, annot=True, cmap="YlGnBu", fmt="d", cbar=False)
plt.title('Heatmap des fréquences entre Target_Audience et Customer_Segment')
plt.xlabel('Segment Client')
plt.ylabel('Cible du Public')
plt.tight_layout()
plt.show()

from sklearn.preprocessing import LabelEncoder

# Créer un objet LabelEncoder
label_encoder = LabelEncoder()

# Identifier les colonnes catégorielles
categorical_cols = data.select_dtypes(include=['object']).columns

# Appliquer le LabelEncoder sur chaque colonne catégorielle
for col in categorical_cols:
    data[col] = label_encoder.fit_transform(data[col])

# Vérifier le résultat
print(data.head())